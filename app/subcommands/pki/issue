#!/bin/sh
# Description: Issue a wildcard tls certificate for the given domain name
# Usage: <FQDN>
# vim: ft=sh ts=4 sw=4 sts=4 noet
set -eu

# shellcheck source=app/lib/output.sh
. "$DAB/lib/output.sh"
# shellcheck source=app/lib/docker.sh
. "$DAB/lib/docker.sh"

[ -n "${1:-}" ] || fatality 'must provide a Fully Qualified Domain Name'
fqdn="$1"

if [ -d "$DAB_CONF_PATH/pki/$fqdn/cfssl/csr" ]; then
	exit 0
fi

dab pki ready

mkdir -p "$DAB_CONF_PATH/pki/$fqdn/cfssl"

echo "{
  'CN': '$fqdn',
  'hosts': [
	'$fqdn',
	'*.$fqdn'
  ],
  'key': {
    'algo': 'rsa',
    'size': 2048
  },
  'names': [
    {
      'O': 'Dab $DAB_USER'
    }
  ]
}" | sed s/"'"/'"'/g >"$DAB_CONF_PATH/pki/$fqdn/cfssl/csr"

# Allows concurrent certificate issuance without colliding
tmpid="$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 13)"

# Generate the certificate
dpose cfssl run --entrypoint /bin/sh --rm cfssl -c \
	"cfssl gencert -ca '$DAB_CONF_PATH/pki/ca/certificate' -ca-key '$DAB_CONF_PATH/pki/ca/key' -config '$DAB_CONF_PATH/pki/ca/cfssl/ca' '$DAB_CONF_PATH/pki/$fqdn/cfssl/csr' | cfssljson -bare $tmpid"

mv "$DAB_CONF_PATH/pki/$tmpid-key.pem" "$DAB_CONF_PATH/pki/$fqdn/key"
mv "$DAB_CONF_PATH/pki/$tmpid.pem" "$DAB_CONF_PATH/pki/$fqdn/certificate"
mv "$DAB_CONF_PATH/pki/$tmpid.csr" "$DAB_CONF_PATH/pki/$fqdn/csr"
cat "$DAB_CONF_PATH/pki/$fqdn/certificate" "$DAB_CONF_PATH/pki/$fqdn/key" >"$DAB_CONF_PATH/pki/$fqdn/bundle"

inform "$fqdn pem formatted certificate can be found at $DAB_CONF_PATH/pki/$fqdn/certificate"
inform "$fqdn pem formatted private key can be found at $DAB_CONF_PATH/pki/$fqdn/key"
inform "$fqdn pem formatted key & cert bundle can be found at $DAB_CONF_PATH/pki/$fqdn/bundle"
