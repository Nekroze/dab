#!/bin/sh
# Description: Display a tip, you may define custom tips by adding to the config key 'tips/custom'
# vim: ft=sh ts=4 sw=4 sts=4 noet
set -euf

# shellcheck disable=SC1090
. "$DAB/lib/config.sh"

TIPS="
Tips can be disabled by setting the environment variable \$DAB_TIPS to 'false'
Use 'dab repo list' to see which repositories are not on origin/master
Try 'dab apps start portainer' to manage and monitor docker containers in your browser
Did you know the dab configuration is a tree structure, run 'dab config keys' to explore it
You can explore the dab container with 'dab shell' which is helpful for testing commands
You can explore the dab lab network with 'dab network shell'
You do not need to do anything to ensure you are using the latest version of dab, but can trigger an update with 'dab update'
Each repository can have any number of entrypoints defined
Repository entry points can take parameters for extra customizability
Apps provide helpful interfaces or services for accomplishing DevOps tasks, see what is available with 'dab apps list'
Any git repository can be managed and orchestrated by Dab, even if it does not need to start an app
Apps persist data by default where appropriate, if you want to wipe data try 'dab apps destroy <APP_NAME>'
A public key infrastructure (pki) and secrets management engine backed by Hashicorp Vault and Consul is provided that persists across reboots
The public key infrastructure (pki) is able to issue x509 certificates suitable for HTTPS that are only renewed when neccesary
The public key infrastructure (pki) will generate a certificate authority only once (unless destroyed) and automatically install it into all local browsers
Most apps Dab provides have docker health checks so you can see at a glance if dependencies are behaving correctly
Dab creates a customizable lab network, any container's your repositories starts should connect to it for instrumentation and tooling
The lab network can be rebuilt with 'dab network recreate' with little ill effect as all containers are first detached then reattached to the new network
Repository entry points might use \$DAB_UID and \$DAB_GID environment variables when running docker containers with bind mounts to prevent permissions issues
You can set environment variables for all users of your config by setting for example the 'enironment/FOO' config key which defined the \$FOO environment variable
You may specify custom tips specific to your config by adding to the 'tips/custom' config key one tip per line
You may specify specific versions of apps by setting an environment variable such as \$DAB_APPS_VAULT_TAG to a valid docker tag for the vault docker image, for example, and it will be used after it is updated
Dab provides tab completion for bash, zsh, and fish which is automatically updated. For more information try 'dab completion'
Groups are a collection of other groups and repository entrypoints
Group dependencies are in First In First Out (FIFO) order making the top of the list the first to run
To view the history of dab run 'dab changelog'
Every subcommand accepts '-h' or '--help' or just 'help' to display usage information
Every subcommand accepts '-v' or '--version' or just 'version' to display version and machine information
Should you wish to wipe your public key infrustructure and certificate authority and start fresh you may run 'dab pki destroy'
x509 Certificates are stored in the dab config for example the key 'pki/ca/certificate' for the certificate authority
If you are running the dab managed influxdb service then all dab runs will be recorded as metric annotations
Apps can be updated/rebuilt with 'dab apps update <APP_NAME>'
Check a running app's status with 'dab apps status <APP_NAME>'
Check a running app's logs with 'dab apps logs <APP_NAME>'
Any .log files placed in the docker volume named dab_logs can be ingested for display via chronograf by running the remote_syslog2 app
You can use docker-compose-gen in your entrypoint scripts to easily interface with Dab docker objects
You can use multitail in your entrypoint scripts to display your logs, and in style
If you want to dig into the messages on Dab's Kafka topics, try 'dab apps start kafka-topics-ui' for a handy web interface
If you wish to preserve any environmental variables while using dab with sudo, you can run dab like so 'sudo -E dab foo bar'
Thought of something you wish dab could do for you? file a Feature Request at https://github.com/Nekroze/dab/issues/new?template=feature_request.md
Think dab could do something better than it does now? file a Change Request at https://github.com/Nekroze/dab/issues/new?template=change_request.md
"

get_tip_corpus() {
	if [ "${DAB_TIPS_BUILTIN:-true}" = 'true' ]; then
		echo "$TIPS" | sed '/^\s*$/d' | awk '{ print "[tips:dab] " $0 }'
	fi
	config_get tips/custom | sed '/^\s*$/d' | awk '{ print "[tips:custom] " $0 }'
}

get_tip() {
	get_tip_corpus | sed '/^\s*$/d' | shuf -n 1
}

echo_color "$COLOR_PURPLE" "$(get_tip)!"
