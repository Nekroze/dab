version: '3.5'

services:

  watchtower:
    container_name: dab_watchtower
    image: v2tec/watchtower:latest
    labels:
      description: 'Watches labelled container images for updates and applies them'
      com.centurylinklabs.watchtower.enable: 'true'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --cleanup --label-enable
    tmpfs:
      - /tmp

  influxdb:
    container_name: dab_influxdb
    image: "influxdb:${DAB_APPS_INFLUXDB_TAG:-alpine}"
    restart: on-failure
    labels:
      description: 'Time series database from the TICK stack'
      com.centurylinklabs.watchtower.enable: 'true'
    environment:
      INFLUXDB_DATA_QUERY_LOG_ENABLED: 'false'
      INFLUXDB_HTTP_LOG_ENABLED: 'false'
      INFLUXDB_HTTP_PPROF_ENABLED: 'false'
    volumes:
      - influxdb:/var/lib/influxdb
    healthcheck:
      test: 'wget --spider http://localhost:8086/ping || exit 1'
      interval: 30s
      timeout: 10s
      retries: 3
    tmpfs:
      - /tmp

  telegraf:
    container_name: dab_telegraf
    image: "telegraf:${DAB_APPS_TELEGRAF_TAG:-alpine}"
    labels:
      description: 'Metrics collection agent from the TICK stack'
    depends_on:
      - influxdb
      - docker-gen
    restart: on-failure
    command: --quiet
    environment:
      DAB_APPS_MYSQL_ROOT_PASSWORD: "${DAB_APPS_MYSQL_ROOT_PASSWORD:-root}"
    volumes:
      - gend:/etc/telegraf
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/run/utmp:/var/run/utmp:ro
    healthcheck:
      test: 'wget --spider http://localhost:8086/ping || exit 1'
      interval: 30s
      timeout: 10s
      retries: 3
    tmpfs:
      - /tmp

  logspout:
    container_name: dab_logspout
    image: "gliderlabs/logspout:${DAB_APPS_LOGSPOUT_TAG:-latest}"
    restart: on-failure
    labels:
      description: 'Log routing for Docker container logs, points to tick'
      com.centurylinklabs.watchtower.enable: 'true'
    depends_on:
      - telegraf
    volumes:
      - /etc/hostname:/etc/host_hostname:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      syslog://telegraf:6514
    environment:
      INACTIVITY_TIMEOUT: 1m
    tmpfs:
      - /tmp

  consul:
    container_name: dab_consul
    image: "consul:${DAB_APPS_CONSUL_TAG:-latest}"
    restart: on-failure
    labels:
      description: 'Services discovery and key value store'
      com.centurylinklabs.watchtower.enable: 'true'
    volumes:
      - consul:/consul/data
    expose:
      - 8500
    environment:
      CONSUL_LOCAL_CONFIG: >
        {
          "datacenter": "${DAB_INSTANCE_NAME:-dab}",
          "skip_leave_on_interrupt": true,
          "addresses": {
            "http": "0.0.0.0",
            "dns": "0.0.0.0"
          }
        }
    command: agent -server -bootstrap -ui
    healthcheck:
      test: 'wget --spider http://localhost:8500/v1/status/leader || exit 1'
      interval: 30s
      timeout: 10s
      retries: 3
    tmpfs:
      - /tmp

  redis:
    container_name: dab_redis
    image: "redis:${DAB_APPS_REDIS_TAG:-latest}"
    labels:
      description: 'In-memory data structure store'
      exposing: 'tcp'
      com.centurylinklabs.watchtower.enable: 'true'
    restart: on-failure
    healthcheck:
      test: 'redis-cli ping'
      interval: 30s
      timeout: 10s
      retries: 3
    expose:
      - 6379
    ports:
      - '16379:6379'
    tmpfs:
      - /tmp

  vault:
    container_name: dab_vault
    build:
      context: .
      dockerfile: Dockerfile.vault
      args:
        - "VAULT_TAG=${DAB_APPS_VAULT_TAG:-latest}"
    labels:
      description: 'Store, manage, and generate secrets with Hashicorp Vault``${DAB_APPS_VAULT_TOKEN:-}'
    depends_on:
      - consul
    restart: on-failure
    healthcheck:
      test: 'netstat -tulpn | grep 0.0.0.0:8200'
      interval: 15s
      timeout: 5s
      retries: 3
    environment:
      VAULT_ADDR: 'http://127.0.0.1:8200'
    cap_add:
      - IPC_LOCK
    tmpfs:
      - /tmp

  postgres:
    container_name: dab_postgres
    image: "postgres:${DAB_APPS_POSTGRES_TAG:-alpine}"
    labels:
      description: 'Object-relational database management system'
      exposing: 'tcp'
      com.centurylinklabs.watchtower.enable: 'true'
    restart: on-failure
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres:/var/lib/postgresql/data/pgdata
    tmpfs:
      - /tmp

  elasticsearch:
    container_name: dab_elasticsearch
    image: "docker.elastic.co/elasticsearch/elasticsearch:${DAB_APPS_ELASTICSEARCH_VERSION:-6.4.2}"
    labels:
      description: 'Object-relational database management system'
    restart: on-failure
    environment:
      discovery.type: 'single-node'
      bootstrap.memory_lock: 'true'
      ES_JAVA_OPTS: '-Xms512m -Xmx512m'
    healthcheck:
      test: 'curl -fsSL "http://localhost:9200/_cat/health?h=status" | grep green'
      interval: 30s
      timeout: 10s
      retries: 3
    tmpfs:
      - /tmp

  zookeeper:
    container_name: dab_zookeeper
    image: "confluentinc/cp-zookeeper:${DAB_APPS_ZOOKEEPER_TAG:-latest}"
    labels:
      description: 'Distributed configuration service'
      com.centurylinklabs.watchtower.enable: 'true'
    restart: on-failure
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_LOG4J_ROOT_LOGLEVEL: WARN
    tmpfs:
      - /tmp

  kafka:
    container_name: dab_kafka
    image: "confluentinc/cp-kafka:${DAB_APPS_KAFKA_TAG:-latest}"
    labels:
      description: 'Stream processing platform'
      com.centurylinklabs.watchtower.enable: 'true'
    depends_on:
      - zookeeper
    restart: on-failure
    environment:
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
    tmpfs:
      - /tmp

  mysql:
    container_name: dab_mysql
    image: "mysql:${DAB_APPS_MYSQL_TAG:-latest}"
    labels:
      description: "Open Source RDBMS`root`${DAB_APPS_MYSQL_ROOT_PASSWORD:-root}"
      exposing: 'tcp'
      com.centurylinklabs.watchtower.enable: 'true'
    restart: on-failure
    environment:
      MYSQL_ROOT_PASSWORD: "${DAB_APPS_MYSQL_ROOT_PASSWORD:-root}"
    volumes:
      - mysql:/var/lib/mysql
    tmpfs:
      - /tmp

  nats:
    container_name: dab_nats
    image: "nats:${DAB_APPS_NATS_TAG:-latest}"
    labels:
      description: 'Cloud native messaging system'
      com.centurylinklabs.watchtower.enable: 'true'
    restart: on-failure
    tmpfs:
      - /tmp

  memcached:
    container_name: dab_memcached
    image: "memcached:${DAB_APPS_MEMCACHED_TAG:-alpine}"
    labels:
      description: 'Distributed memory object caching'
      exposing: 'tcp'
      com.centurylinklabs.watchtower.enable: 'true'
    restart: on-failure
    tmpfs:
      - /tmp

  docker-gen:
    container_name: dab_docker-gen
    build:
      context: .
      dockerfile: Dockerfile.docker-gen
      args:
        - "DOCKER_GEN_TAG=${DAB_APPS_DOCKER_GEN_TAG:-latest}"
    labels:
      description: 'Render files using live docker data'
      com.centurylinklabs.watchtower.enable: 'true'
    restart: on-failure
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock
      - gend:/srv/gend
    tmpfs:
      - /tmp

  remote-syslog2:
    container_name: dab_remote-syslog2
    build:
      context: .
      dockerfile: Dockerfile.remote_syslog2
    labels:
      description: 'Ingests .log files placed in the docker volume named dab_logs'
    depends_on:
      - telegraf
    restart: on-failure
    volumes:
      - logs:/srv/logs
    tmpfs:
      - /tmp

  vyne:
    container_name: dab_vyne
    image: "vyneco/vyne:${DAB_APPS_VYNE_TAG:-latest}"
    labels:
      description: 'A platform for automating integration between services'
      com.centurylinklabs.watchtower.enable: 'true'
    restart: on-failure
    expose:
      - 9022
    environment:
      PROFILE: 'embedded-discovery'
    tmpfs:
      - /tmp

  cyberchef:
    container_name: dab_cyberchef
    build:
      context: .
      dockerfile: Dockerfile.cyberchef
      args:
        - "NGINX_TAG=${DAB_APPS_NGINX_TAG:-alpine}"
    labels:
      description: 'The Cyber Swiss Army Knife'
    expose:
      - 80
    healthcheck:
      test: 'wget --spider http://localhost || exit 1'
      interval: 1m
      timeout: 10s
      retries: 3
    tmpfs:
      - /tmp

  portainer:
    container_name: dab_portainer
    image: "portainer/portainer:${DAB_APPS_PORTAINER_TAG:-latest}"
    labels:
      description: 'Docker Management Web UI'
      com.centurylinklabs.watchtower.enable: 'true'
    expose:
      - 9000
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer:/data
    tmpfs:
      - /tmp

  chronograf:
    container_name: dab_chronograf
    image: "chronograf:${DAB_APPS_CHRONOGRAF_TAG:-alpine}"
    labels:
      description: 'Chronograf metrics explorer from the TICK stack'
      com.centurylinklabs.watchtower.enable: 'true'
    depends_on:
      - influxdb
      - telegraf
      - logspout
      - remote-syslog2
      - kapacitor
    volumes:
      - chronograf:/var/lib/chronograf
    environment:
      INFLUXDB_URL: http://influxdb:8086
      KAPACITOR_URL: http://kapacitor:9092
      LOG_LEVEL: error
    expose:
      - 8888
    healthcheck:
      test: 'wget --spider http://localhost:8888/ || exit 1'
      interval: 1m
      timeout: 10s
      retries: 3
    tmpfs:
      - /tmp

  kapacitor:
    container_name: dab_kapacitor
    image: "kapacitor:${DAB_APPS_KAPACITOR_TAG:-alpine}"
    labels:
      description: 'Real-Time metrics processing from the TICK stack'
      com.centurylinklabs.watchtower.enable: 'true'
    depends_on:
      - influxdb
    environment:
      KAPACITOR_HOSTNAME: kapacitor
      KAPACITOR_INFLUXDB_0_URLS_0: http://influxdb:8086
      LOG_LEVEL: error
    expose:
      - 9092
    volumes:
      - kapacitor:/var/lib/kapacitor
    healthcheck:
      test: 'wget --spider http://localhost:9092/kapacitor/v1/ping || exit 1'
      interval: 1m
      timeout: 10s
      retries: 3
    tmpfs:
      - /tmp

  traefik:
    container_name: dab_traefik
    image: "traefik:${DAB_APPS_TRAEFIK_TAG:-alpine}"
    labels:
      description: 'The Cloud Native Edge Router, docker reverse proxy'
      com.centurylinklabs.watchtower.enable: 'true'
    command:
      - --ping
      - --web
      - --api
      - --docker
      - --accesslog
      - --tracing
      - --tracing.backend=zipkin
      - --tracing.zipkin
      - --tracing.zipkin.httpendpoint=http://telegraf:9411/api/v1/spans
    expose:
      - 80
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - default
      - lab
    healthcheck:
      test: 'wget --spider http://localhost:8080/ping || exit 1'
      interval: 1m
      timeout: 10s
      retries: 3
    tmpfs:
      - /tmp

  ngrok:
    container_name: dab_ngrok
    build:
      context: .
      dockerfile: Dockerfile.ngrok
    labels:
      description: 'Secure introspectable tunnels, points to traefik'
    depends_on:
      - traefik
    expose:
      - 4040
    networks:
      - default
      - lab
    healthcheck:
      test: 'wget --spider http://localhost:4040 || exit 1'
      interval: 1m
      timeout: 10s
      retries: 3
    tmpfs:
      - /tmp

  sysdig:
    container_name: dab_sysdig
    image: "sysdig/sysdig:${DAB_APPS_SYSDIG_TAG:-latest}"
    labels:
      description: 'Universal system visibility tool'
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock
      - /dev:/host/dev
      - /proc:/host/proc:ro
      - /boot:/host/boot:ro
      - /lib/modules:/host/lib/modules:ro
      - /usr:/host/usr:ro
    tmpfs:
      - /tmp

  grafana:
    container_name: dab_grafana
    build:
      context: .
      dockerfile: Dockerfile.grafana
      args:
        - "GRAFANA_TAG=${DAB_APPS_GRAFANA_TAG:-latest}"
    labels:
      description: 'The open platform for analytics and monitoring`admin`admin'
      com.centurylinklabs.watchtower.enable: 'true'
    volumes:
      - grafana:/var/lib/grafana
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: 'true'
    expose:
      - 3000
    healthcheck:
      test: 'wget --spider http://localhost:3000/api || exit 1'
      interval: 1m
      timeout: 10s
      retries: 3
    tmpfs:
      - /tmp

  serveo:
    container_name: dab_serveo
    build:
      context: .
      dockerfile: Dockerfile.ssh
    labels:
      description: 'Expose local servers to the internet'
    entrypoint:
      - /usr/bin/ssh
    command:
      - '-o StrictHostKeyChecking=no'
      - '-R 80:traefik:80'
      - 'serveo.net'
    tmpfs:
      - /tmp

  ntopng:
    container_name: dab_ntopng
    build:
      context: .
      dockerfile: Dockerfile.ntopng
    labels:
      description: 'Monitor network interfaces'
    depends_on:
      - redis
    network_mode: host
    expose:
      - 3000
    restart: on-failure
    command: --redis localhost:16379
    tmpfs:
      - /tmp

  vaultbot:
    container_name: dab_vaultbot
    image: "msvechla/vaultbot:${DAB_APPS_VAULTBOT_TAG:-latest}"
    labels:
      description: 'Automate interaction with Hashicorp Vault'
      com.centurylinklabs.watchtower.enable: 'true'
    depends_on:
      - vault
    entrypoint:
      - ./vaultbot
      - '--vault_addr=http://vault:8200'
    volumes:
      - "$DAB_CONF_PATH:$DAB_CONF_PATH"
    tmpfs:
      - /tmp

  pgadmin:
    container_name: dab_pgadmin
    image: "dpage/pgadmin4:${DAB_APPS_PGADMIN_TAG:-latest}"
    labels:
      description: 'Postgres administration console`user@dab`admin'
      com.centurylinklabs.watchtower.enable: 'true'
    environment:
      PGADMIN_DEFAULT_EMAIL: 'user@dab'
      PGADMIN_DEFAULT_PASSWORD: 'admin'
    networks:
      - default
      - lab
    expose:
      - 80
    tmpfs:
      - /tmp

  kafkacat:
    container_name: dab_kafkacat
    image: "confluentinc/cp-kafkacat:${DAB_APPS_KAFKACAT_TAG:-latest}"
    labels:
      description: 'Lightweight kafka console consumer/producer'
      com.centurylinklabs.watchtower.enable: 'true'
    networks:
      - default
      - lab
    entrypoint:
      - /usr/local/bin/kafkacat
    command: '-b kafka -L'

  adminer:
    container_name: dab_adminer
    image: "adminer:${DAB_APPS_ADMINER_TAG:-latest}"
    restart: on-failure
    labels:
      description: 'Database manager with a small footprint'
      com.centurylinklabs.watchtower.enable: 'true'
    networks:
      - default
      - lab
    environment:
      ADMINER_DEFAULT_SERVER: mysql
    expose:
      - 8080

  kibana:
    container_name: dab_kibana
    image: "kibana:${DAB_APPS_KIBANA_VERSION:-6.4.2}"
    restart: on-failure
    labels:
      description: 'Explore and visualize elasticsearch data'
      com.centurylinklabs.watchtower.enable: 'true'
    depends_on:
      - elasticsearch
    expose:
      - 5601

  ballerina:
    container_name: dab_ballerina
    image: "ballerina/ballerina-platform:${DAB_APPS_BALLERINA_TAG:-latest}"
    labels:
      description: 'IDE and language designed to make integration simple.'
      com.centurylinklabs.watchtower.enable: 'true'
    restart: on-failure
    command:
      - 'composer'
      - '--host 0.0.0.0'
    expose:
      - 9091
    volumes:
      - "$DAB_REPO_PATH:/home/ballerina"
    tmpfs:
      - /tmp

  ansible:
    container_name: dab_ansible
    build:
      context: .
      dockerfile: Dockerfile.ansible
      args:
        - "ANSIBLE_VERSION=${DAB_APPS_ANSIBLE_VERSION:-2.7.1}"
    labels:
      description: 'Automated configuration management'
    environment:
      - HOME
    user: "$DAB_UID:$DAB_GID"
    volumes:
      - "$HOME:$HOME"
      - "$HOST_PWD:$HOST_PWD"
      - "$HOST_PWD:/ansible/playbooks"
      - logs:/var/log/ansible
    working_dir: "$HOST_PWD"
    tmpfs:
      - /tmp

  xsstrike:
    container_name: dab_xsstrike
    build:
      context: .
      dockerfile: Dockerfile.xsstrike
      args:
        - "XSSTRIKE_VERSION=${DAB_APPS_XSSTRIKE_VERSION:-3.0.3}"
    networks:
       - lab
    labels:
      description: 'Advanced XSS detection suite'
    tmpfs:
      - /tmp

  fn:
    container_name: dab_fn
    build:
      context: .
      dockerfile: Dockerfile.fn
      args:
        - "FN_VERSION=${DAB_APPS_FN_VERSION:-0.5.29}"
    labels:
      description: 'Open Source, Container-native, Serverless platform'
    environment:
      HOME:
      FN_DOCKER_NETWORKS: 'lab'
    command: start
    user: "${DAB_UID}:${DAB_DOCKER_GID}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - "$HOME:$HOME"
      - "$HOST_PWD:$HOST_PWD"
    working_dir: "$HOST_PWD"
    restart: on-failure
    tmpfs:
      - /tmp

  huginn:
    container_name: dab_huginn
    image: "huginn/huginn:${DAB_APPS_HUGINN_TAG:-latest}"
    depends_on:
      - postgres
    labels:
      description: 'Create agents that monitor and act on your behalf`admin`password'
    environment:
      DATABASE_ADAPTER: postgresql
      DATABASE_HOST: postgres
      DATABASE_USERNAME: postgres

  dive:
    container_name: dab_dive
    build:
      context: .
      dockerfile: Dockerfile.dive
      args:
        - "DIVE_VERSION=${DAB_APPS_DIVE_VERSION:-0.4.1}"
    labels:
      description: 'A tool for exploring each layer in a docker image'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: on-failure
    tmpfs:
      - /tmp

volumes:
  chronograf:
  consul:
  gend:
  grafana:
  influxdb:
  kapacitor:
  mysql:
  portainer:
  postgres:
  vault:
  logs:
    external:
      name: dab_logs

networks:
  default:
    name: dab_apps
  lab:
    external:
      name: lab
