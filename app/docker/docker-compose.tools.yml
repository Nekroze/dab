version: '3.5'

services:

  cyberchef:
    container_name: dab_cyberchef
    build:
      context: .
      dockerfile: Dockerfile.cyberchef
      args:
        - "NGINX_TAG=${DAB_TOOLS_NGINX_TAG:-alpine}"
    labels:
      description: 'The Cyber Swiss Army Knife'
    ports:
      - 80
    healthcheck:
      test: 'wget --spider http://localhost || exit 1'
      interval: 1m
      timeout: 10s
      retries: 3
    tmpfs:
      - /tmp

  portainer:
    container_name: dab_portainer
    image: "portainer/portainer:${DAB_TOOLS_PORTAINER_TAG:-latest}"
    labels:
      description: 'Docker Management Web UI'
      com.centurylinklabs.watchtower.enable: 'true'
    ports:
      - 9000
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer:/data
    tmpfs:
      - /tmp

  chronograf:
    container_name: dab_chronograf
    image: "chronograf:${DAB_TOOLS_CHRONOGRAF_TAG:-alpine}"
    labels:
      description: 'Chronograf metrics explorer from the TICK stack'
      com.centurylinklabs.watchtower.enable: 'true'
    networks:
      - services
    volumes:
      - chronograf:/var/lib/chronograf
    environment:
      INFLUXDB_URL: http://influxdb:8086
      KAPACITOR_URL: http://kapacitor:9092
      LOG_LEVEL: error
    ports:
      - 8888
    healthcheck:
      test: 'wget --spider http://localhost:8888/ || exit 1'
      interval: 1m
      timeout: 10s
      retries: 3
    tmpfs:
      - /tmp

  kapacitor:
    container_name: dab_kapacitor
    image: "kapacitor:${DAB_TOOLS_KAPACITOR_TAG:-alpine}"
    labels:
      description: 'Real-Time metrics processing from the TICK stack'
      com.centurylinklabs.watchtower.enable: 'true'
    networks:
      - services
    environment:
      KAPACITOR_HOSTNAME: kapacitor
      KAPACITOR_INFLUXDB_0_URLS_0: http://influxdb:8086
      LOG_LEVEL: error
    ports:
      - 9092
    volumes:
      - kapacitor:/var/lib/kapacitor
    healthcheck:
      test: 'wget --spider http://localhost:9092/kapacitor/v1/ping || exit 1'
      interval: 1m
      timeout: 10s
      retries: 3
    tmpfs:
      - /tmp

  traefik:
    container_name: dab_traefik
    image: "traefik:${DAB_TOOLS_TRAEFIK_TAG:-alpine}"
    labels:
      description: 'The Cloud Native Edge Router, docker reverse proxy'
      com.centurylinklabs.watchtower.enable: 'true'
    command:
      - --ping
      - --web
      - --api
      - --docker
      - --accesslog
      - --tracing
      - --tracing.backend=zipkin
      - --tracing.zipkin
      - --tracing.zipkin.httpendpoint=http://telegraf:9411/api/v1/spans
    ports:
      - 80
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - lab
      - default
      - services
    healthcheck:
      test: 'wget --spider http://localhost:8080/ping || exit 1'
      interval: 1m
      timeout: 10s
      retries: 3
    tmpfs:
      - /tmp

  ngrok:
    container_name: dab_ngrok
    build:
      context: .
      dockerfile: Dockerfile.ngrok
    labels:
      description: 'Secure introspectable tunnels, points to traefik'
    ports:
      - 4040
    healthcheck:
      test: 'wget --spider http://localhost:4040 || exit 1'
      interval: 1m
      timeout: 10s
      retries: 3
    tmpfs:
      - /tmp

  sysdig:
    container_name: dab_sysdig
    image: "sysdig/sysdig:${DAB_TOOLS_SYSDIG_TAG:-latest}"
    labels:
      description: 'Universal system visibility tool'
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock
      - /dev:/host/dev
      - /proc:/host/proc:ro
      - /boot:/host/boot:ro
      - /lib/modules:/host/lib/modules:ro
      - /usr:/host/usr:ro
    tmpfs:
      - /tmp

  grafana:
    container_name: dab_grafana
    build:
      context: .
      dockerfile: Dockerfile.grafana
      args:
        - "GRAFANA_TAG=${DAB_TOOLS_GRAFANA_TAG:-latest}"
    labels:
      description: 'The open platform for analytics and monitoring`admin`admin'
      com.centurylinklabs.watchtower.enable: 'true'
    networks:
      - services
    volumes:
      - grafana:/var/lib/grafana
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: 'true'
    ports:
      - 3000
    healthcheck:
      test: 'wget --spider http://localhost:3000/api || exit 1'
      interval: 1m
      timeout: 10s
      retries: 3
    tmpfs:
      - /tmp

  serveo:
    container_name: dab_serveo
    build:
      context: .
      dockerfile: Dockerfile.ssh
    labels:
      description: 'Expose local servers to the internet'
    entrypoint:
      - /usr/bin/ssh
    command:
      - '-o StrictHostKeyChecking=no'
      - '-R 80:traefik:80'
      - 'serveo.net'
    tmpfs:
      - /tmp

  ntopng:
    container_name: dab_ntopng
    build:
      context: .
      dockerfile: Dockerfile.ntopng
    labels:
      description: 'Monitor network interfaces'
    network_mode: host
    ports:
      - 3000
    restart: on-failure
    command: --redis localhost:16379
    tmpfs:
      - /tmp

  vaultbot:
    container_name: dab_vaultbot
    image: "msvechla/vaultbot:${DAB_TOOLS_VAULTBOT_TAG:-latest}"
    labels:
      description: 'Automate interaction with Hashicorp Vault'
      com.centurylinklabs.watchtower.enable: 'true'
    entrypoint:
      - ./vaultbot
      - '--vault_addr=http://vault:8200'
    volumes:
      - "$DAB_CONF_PATH:$DAB_CONF_PATH"
    networks:
      - services
    tmpfs:
      - /tmp

  pgadmin:
    container_name: dab_pgadmin
    image: "dpage/pgadmin4:${DAB_TOOLS_PGADMIN_TAG:-latest}"
    labels:
      description: 'Postgres administration console`user@dab`admin'
      com.centurylinklabs.watchtower.enable: 'true'
    environment:
      PGADMIN_DEFAULT_EMAIL: 'user@dab'
      PGADMIN_DEFAULT_PASSWORD: 'admin'
    networks:
      - services
      - lab
    ports:
      - 80
    tmpfs:
      - /tmp

  kafkacat:
    container_name: dab_kafkacat
    image: "confluentinc/cp-kafkacat:${DAB_TOOLS_KAFKACAT_TAG:-latest}"
    labels:
      description: 'Lightweight kafka console consumer/producer'
      com.centurylinklabs.watchtower.enable: 'true'
    networks:
      - services
      - lab
    entrypoint:
      - /usr/local/bin/kafkacat
    command: '-b kafka -L'

  adminer:
    container_name: dab_adminer
    image: "adminer:${DAB_TOOLS_ADMINER_TAG:-latest}"
    restart: on-failure
    labels:
      description: 'Database manager with a small footprint'
      com.centurylinklabs.watchtower.enable: 'true'
    networks:
      - services
      - lab
    environment:
      ADMINER_DEFAULT_SERVER: mysql
    ports:
      - 8080

  kibana:
    container_name: dab_kibana
    image: "kibana:${DAB_TOOLS_KIBANA_TAG:-6.4.2}"
    restart: on-failure
    labels:
      description: 'Explore and visualize elasticsearch data'
      com.centurylinklabs.watchtower.enable: 'true'
    networks:
      - services
    ports:
      - 5601

  ballerina:
    container_name: dab_ballerina
    image: "ballerina/ballerina-platform:${DAB_TOOLS_BALLERINA_TAG:-latest}"
    labels:
      description: 'IDE for a programming language and runtime co-designed to be agile and integration simple.'
      com.centurylinklabs.watchtower.enable: 'true'
    restart: on-failure
    command:
      - 'composer'
      - '--host 0.0.0.0'
    ports:
      - 9091
    volumes:
      - "$DAB_REPO_PATH:/home/ballerina"
    tmpfs:
      - /tmp

  ansible:
    container_name: dab_ansible
    build:
      context: .
      dockerfile: Dockerfile.ansible
      args:
        - "ANSIBLE_VERSION=${DAB_TOOLS_ANSIBLE_TAG:-2.7.1}"
    labels:
      description: 'Automated configuration management'
    restart: never
    environment:
      - HOME
    user: "$DAB_UID:$DAB_GID"
    volumes:
      - "$HOME:$HOME"
      - "$HOST_PWD:$HOST_PWD"
      - "$HOST_PWD:/ansible/playbooks"
      - logs:/var/log/ansible
    working_dir: "$HOST_PWD"
    tmpfs:
      - /tmp

  xsstrike:
    container_name: dab_xsstrike
    build:
      context: .
      dockerfile: Dockerfile.xsstrike
      args:
        - "XSSTRIKE_VERSION=${DAB_TOOLS_XSSTRIKE_VERSION:-3.0.3}"
    networks:
       - lab
    labels:
      description: 'Advanced XSS detection suite'
    restart: never
    tmpfs:
      - /tmp

volumes:
  kapacitor:
  chronograf:
  portainer:
  grafana:
  logs:
    external:
      name: dab_logs

networks:
  services:
    external:
      name: services
  lab:
    external:
      name: lab
